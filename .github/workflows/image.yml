# build/Dockerfileを使って、イメージ ghcr.io/densuke-st/xampp-devenv:latest をビルドして、pushする
# ただしタグ名はブランチ名によって変わる
# * mainブランチであればlatestになる
# * それ以外のブランチであれば、ブランチ名になる
# * また、それぞれのイメージについて、ビルド時のエポックタイムをタグにつける

name: Docker Image CI

on:
    push:
        # branches:
        #   - main
    workflow_dispatch: # 手動実行

# GHCRへのプッシュにはパーミッションが必要です
permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

    # actで実行しているかのチェック(一部のアクションを動かさないようにするため)
    check-act:
      runs-on: ubuntu-latest
      outputs:
        IS_ACT: ${{ steps.check-act.outputs.IS_ACT }}
        RUNNER: ${{ steps.set-runner.outputs.RUNNER }}
      steps:
        - name: actのチェック
          id: check-act
          run: |
            R=false
            [ -n "$ACT" ] && R=true
            [ -n "$GITHUB_EVENT_NAME" ] && [ "$GITHUB_EVENT_NAME" = "pull_request" ] && R=true
            echo "IS_ACT=$R" >> $GITHUB_OUTPUT
        # act使用中は結局ホスト側のCPUエミュレータを使うことになり、イメージが全部共通になってしまう
        - name: Runnerを切り替える
          id: set-runner
          run: |
            if [ "${{ steps.check-act.outputs.IS_ACT }}" = "true" ]; then
              # ACT環境では、ホストのものをそのまま使えばよい
              echo "Runner is set to ubuntu-24.04"
              echo "RUNNER=ubuntu-24.04" >> $GITHUB_OUTPUT
            else
              # GitHub Actionsではarm64のイメージを使う"
              echo "Runner is set to ubuntu-24.04-arm"
              echo "RUNNER=ubuntu-24.04-arm" >> $GITHUB_OUTPUT
            fi
        - name: 処理結果の出力
          run: |
            echo "running on $(uname -a)"
            echo "IS_ACT=${{ steps.check-act.outputs.IS_ACT }}"
            echo "RUNNER=${{ steps.set-runner.outputs.RUNNER }}"
            if [ "${{ steps.check-act.outputs.IS_ACT }}" = "true" ]; then
              echo "act環境で実行中です。"
            else
              echo "GitHub Actions環境で実行中です。"
            fi

   # シリアル値を生成するジョブ
    make-serial:
      runs-on: ubuntu-latest
      outputs:
        SERIAL_VALUE: ${{ steps.generate-serial.outputs.SERIAL_VALUE }}
      steps:
        - name: シリアル値の生成
          id: generate-serial
          # シリアル値はここでは日時(YYYYMMDDHHMMSS)とする
          run: echo "SERIAL_VALUE=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT


    # イメージ名を生成する、後で何度も使いそうなので集約しておきたい
    make-imagename:
        runs-on: ubuntu-latest
        needs:
          - make-serial
        outputs:
          image_name_tag: ${{ steps.generate-imagename.outputs.image_name_tag }}
          image_name_latest: ${{ steps.generate-imagename.outputs.image_name_latest }}
        steps:
        - name: イメージ名の生成
          id: generate-imagename
          run: |
            BASENAME=ghcr.io/${{ github.repository_owner }}/xampp-devenv
            echo "image_name_tag=${BASENAME}:${{ needs.make-serial.outputs.SERIAL_VALUE }}" >> $GITHUB_OUTPUT
            echo "image_name_latest=${BASENAME}:latest" >> $GITHUB_OUTPUT
    build:
        needs:
          - make-serial
          - make-imagename
          - check-act
        strategy:
          fail-fast: true
          matrix:
            include:
              - platform: linux/amd64
                runner: ubuntu-24.04
                tag_arch: amd64
                dockerfile: Dockerfile
                tag_dist: "ubuntu"
              - platform: linux/amd64
                runner: ubuntu-24.04
                tag_arch: amd64
                dockerfile: Dockerfile.alpine
                tag_dist: "alpine"
              - platform: linux/arm64
                runner: ${{ needs.check-act.outputs.IS_ACT == 'true' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
                tag_arch: arm64
                dockerfile: Dockerfile
                tag_dist: "ubuntu"
              - platform: linux/arm64
                runner: ${{ needs.check-act.outputs.IS_ACT == 'true' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
                tag_arch: arm64
                dockerfile: Dockerfile.alpine
                tag_dist: "alpine"
        runs-on: ${{ matrix.runner }}
        steps:
        - name: ブランチ名を取得して環境変数にセット
          run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        - name: もしBRANCH_NAMEがmainならlatestに変更
          run: |
            if [ "$BRANCH_NAME" = "main" ]; then
              echo "BRANCH_NAME=latest" >> $GITHUB_ENV
            fi
            echo "EPOCH_TIME=$(date +%s)" >> $GITHUB_ENV
        - name: "デバッグ用: 環境変数の出力"
          if: ${{ github.event_name == 'workflow_dispatch' || github.ref != 'refs/heads/main' }}
          run: |
            # 各マトリックスの値も出力
            echo "matrix.platform=${{ matrix.platform }}"
            echo "matrix.runner=${{ matrix.runner }}"
            echo "matrix.tag_arch=${{ matrix.tag_arch }}"
            echo "matrix.dockerfile=${{ matrix.dockerfile }}"
        - name: 変数BRANCH_NAMEの値を出力
          run: echo $BRANCH_NAME
        - name: チェックアウト
          uses: actions/checkout@v4
        - name: "buildx: QEMUのセットアップ"
          uses: docker/setup-qemu-action@v3
        - name: "docker buildの準備"
          uses: docker/setup-buildx-action@v3
        - name: "dockerへのログイン"
          uses: docker/login-action@v3
          if: needs.check-act.outputs.IS_ACT != 'true'
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: "イメージのビルド"
          uses: docker/build-push-action@v5
          with:
            context: .
            file: ./build/${{ matrix.dockerfile }}
            platforms: ${{ matrix.platform }}
            push: ${{ needs.check-act.outputs.IS_ACT != 'true' }}
            load: true
            provenance: false
            tags: ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }}-${{ matrix.tag_arch }},${{ needs.make-imagename.outputs.image_name_latest }}-${{ matrix.tag_dist }}-${{ matrix.tag_arch }}
        - name: "(act上)イメージの削除"
          if: needs.check-act.outputs.IS_ACT == 'true'
          run: |
            docker rmi ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }}-${{ matrix.tag_arch }} || true
    
    # マニフェストを作成して両アーキテクチャを統合利用(actでは実行しない)
    create-manifest:
      runs-on: ubuntu-24.04
      timeout-minutes: 1
      strategy:
        fail-fast: true
        matrix:
          tag_dist:
            - "ubuntu"
            - "alpine"
      needs:
        - build
        - check-act
        - make-serial
        - make-imagename
      if: needs.check-act.outputs.IS_ACT != 'true'
      steps:
        - name: GHCRにログイン
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: マニフェストの作成(latest) -> プッシュ
          # このステップ自体をmainブランチのときはスキップする
          run: |
            docker manifest create ${{ needs.make-imagename.outputs.image_name_latest }}-${{ matrix.tag_dist }} \
              ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }}-amd64 \
              ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }}-arm64
            docker manifest push ${{ needs.make-imagename.outputs.image_name_latest }}-${{ matrix.tag_dist }}
        - name: マニフェストの作成(シリアル値) → プッシュ
          run: |
            set -x
            docker manifest create ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }} \
              ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }}-amd64 \
              ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }}-arm64
              docker manifest push ${{ needs.make-imagename.outputs.image_name_tag }}-${{ matrix.tag_dist }}

    create-latest:
      # mainブランチのときのみ、latestタグを作成する、latestタグはubuntu側を指すようにしておく
      runs-on: ubuntu-24.04
      needs:
        - build
        - check-act
        - make-imagename
        - create-manifest
      if: needs.check-act.outputs.IS_ACT != 'true' && github.ref == 'refs/heads/main'
      steps:
        - name: GHCRにログイン
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: latestタグの作成
          run: |
            docker tag ${{ needs.make-imagename.outputs.image_name_latest }}-ubuntu \
              ${{ needs.make-imagename.outputs.image_name_latest }}
            docker push ${{ needs.make-imagename.outputs.image_name_latest }}

    # act環境の際、残ってるイメージデータなどを削除しておく
    cleanup:
      runs-on: ubuntu-24.04
      needs:
        - build
        - create-manifest
        - make-imagename
        - check-act
      if: needs.check-act.outputs.IS_ACT == 'true'
      strategy:
        fail-fast: true
        matrix:
          dist:
            - ""
            - "-alpine"
      steps:
        - name: act環境のイメージ削除
          run: |
            docker rmi ${{ needs.make-imagename.outputs.image_name_tag }}-amd64${{ matrix.dist }} || true
            docker rmi ${{ needs.make-imagename.outputs.image_name_tag }}-arm64${{ matrix.dist }} || true
            docker rmi ${{ needs.make-imagename.outputs.image_name_latest }}${{ matrix.dist }} || true
            docker rmi ${{ needs.make-imagename.outputs.image_name_tag }}${{ matrix.dist }} || true
            docker image prune -f

    update-template-repo:
      runs-on: ubuntu-latest
      needs:
        - create-manifest
        - make-imagename
        - check-act
      if: needs.check-act.outputs.IS_ACT != 'true'
      steps:
        - name: リポジトリのクローン
          uses: actions/checkout@v4
          with:
            repository: kd-it/xampp-devenv-template
            token: ${{ secrets.TEMPLATE_TOKEN }}
            path: template-repo

        - name: イメージタグの置換
          run: |
            cd template-repo
            # 例: docker-compose.ymlのイメージタグを置換
            sed -i "s|ghcr.io/densuke-st/xampp-devenv:[^ ]*|${{ needs.make-imagename.outputs.image_name_tag }}|g" compose.yml
            # 必要に応じて他ファイルも置換

        - name: 新しいブランチを作成してpush
          id: create-branch
          run: |
            cd template-repo
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            BRANCH=update-xampp-tag-$(date +%Y%m%d%H%M%S)
            echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
            git checkout -b $BRANCH
            git add .
            git commit -m "Update xampp-devenv image tag to ${{ needs.make-imagename.outputs.image_name_tag }}"
            git push origin $BRANCH

        - name: PRを作成
          run: |
            cd template-repo
            gh pr create --title "Update xampp-devenv image tag" \
              --body "自動更新: 新しいイメージタグ ${{ needs.make-imagename.outputs.image_name_tag }} への更新です。" \
              --base main --head ${{ steps.create-branch.outputs.branch }} 
          env:
            GITHUB_TOKEN: ${{ secrets.TEMPLATE_TOKEN }}